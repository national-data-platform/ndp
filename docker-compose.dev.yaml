version: "3"

services:
  # starting ckan section
  ckan:
    platform: linux/amd64
    build:
      context: ckan-docker/ckan
      dockerfile: Dockerfile.dev
      # dockerfile: Dockerfile
      args:
        - TZ=${TZ}
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      solr:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ckan_storage:/var/lib/ckan
      - ./src_extensions:/srv/app/src_extensions
      - ./ckan.ini:/srv/app/ckan.ini
      - ./logs:/srv/app/logs
      - ./supervisord/ckan_harvesting.conf:/etc/supervisord.d/ckan_harvesting.conf
    restart: always
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", "http://localhost:5000"]

  datapusher:
    platform: linux/amd64
    extends:
      file: ckan-docker/docker-compose.dev.yml
      service: datapusher
    restart: always

  db:
    platform: linux/amd64
    extends:
      file: ckan-docker/docker-compose.dev.yml
      service: db
    restart: always

  solr:
    platform: linux/amd64
    extends:
      file: ckan-docker/docker-compose.dev.yml
      service: solr
    restart: always

  redis:
    platform: linux/amd64
    extends:
      file: ckan-docker/docker-compose.dev.yml
      service: redis
    restart: always
  
  # starting mlflow section
  minio:
    platform: linux/amd64
    extends:
      file: mlflow/docker-compose.yaml
      service: minio
    restart: always

  create-s3-buckets:
    platform: linux/amd64
    extends:
      file: mlflow/docker-compose.yaml
      service: create-s3-buckets
    restart: always

  mlflow:
    platform: linux/amd64
    build:
      context: mlflow/core
      dockerfile: Dockerfile
    depends_on:
      - minio
      - db
    environment:
      - GUNICORN_CMD_ARGS
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_BUCKET_NAME
      - MLFLOW_S3_ENDPOINT_URL
      - MLFLOW_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - KEYCLOAK_ISSUER
      - MLFLOW_FLASK_SECRET_KEY
      - MLFLOW_HOST
      - MLFLOW_KEYCLOAK_CLIENT_ID
      - MLFLOW_KEYCLOAK_CLIENT_SECRET
      - MLFLOW_DEFAULT_PASSWORD
      - MLFLOW_TRACKING_USERNAME
      - MLFLOW_TRACKING_PASSWORD
      - MLFLOW_ROOT_PATH
    restart: always

  # starting jhub section
#  jupyterhub:
#    build:
#      context: jhub
#      dockerfile: Dockerfile
#      args:
#        JUPYTERHUB_VERSION: latest
#    restart: always
#    image: jupyterhub
#    volumes:
#      - "./jhub/jupyterhub_config.py:/srv/jupyterhub/jupyterhub_config.py:ro"
#      - "/var/run/docker.sock:/var/run/docker.sock:rw"
#      - "jupyterhub:/data"
#    ports:
#      - ${JUPYTERHUB_PROXY_PORT}:${JUPYTERHUB_PROXY_PORT}
#    environment:
#      - JUPYTERHUB_PROXY_PORT
#      - JUPYTERHUB_PORT
#      - DOCKER_NETWORK_NAME
#      - DOCKER_NOTEBOOK_IMAGE
#      - DOCKER_NOTEBOOK_DIR
#      # for MLFlow connection:
#      - AWS_ACCESS_KEY_ID
#      - AWS_SECRET_ACCESS_KEY
#      - MLFLOW_TRACKING_URI
#      - MLFLOW_S3_ENDPOINT_URL
#      - AWS_BUCKET_NAME
#      - MLFLOW_DEFAULT_PASSWORD
#      - MLFLOW_ADMIN_USERNAME
#      - MLFLOW_ADMIN_PASSWORD
#      # keycloak
#      - OAUTH2_AUTHORIZE_URL
#      - OAUTH2_TOKEN_URL
#      - KEYCLOAK_USERDATA_URL
#      - JUPYTERHUB_KEYCLOAK_CLIENT_ID
#      - JUPYTERHUB_KEYCLOAK_CLIENT_SECRET

  frontend:
#    platform: linux/amd64
    build:
      context: ndp-frontend
      dockerfile: Dockerfile
    restart: always
    environment:
      - KEYCLOAK_ID
      - KEYCLOAK_SECRET
      - KEYCLOAK_ISSUER
      - KEYCLOAK_TOKEN_URL
      - NEXTAUTH_URL
      - NEXTAUTH_SECRET
      - NEXT_PUBLIC_NDP_PASSWORD
      - NEXT_PUBLIC_CKAN_URL
      - NEXT_AWESOME_SERVER_URL
      - NEXT_PUBLIC_CKAN_CATALOG_URL
      - NEXT_PUBLIC_JUPYTER_HUB_URL
      - NEXT_PUBLIC_ML_FLOW_URL
      - NEXT_PUBLIC_KEYCLOAK_API_URL
      - NEXT_PUBLIC_MAILING_LIST_EMAIL
      - NEXT_PUBLIC_NODE_MAILER_EMAIL
      - NEXT_PUBLIC_NODE_MAILER_PSWD
      - NEXT_WORKSPACE_APIS_URL



  nginx:
    platform: linux/amd64
    image: nginx:alpine3.18-slim
    depends_on:
      - ckan
#      - jupyterhub
      - mlflow
    ports:
      - "0.0.0.0:8443:80"
      #- "0.0.0.0:8443:443"
    restart: always
    environment:
      - CKAN_PORT
      - JUPYTERHUB_PROXY_PORT
      - MLFLOW_PORT
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf

  workspaces-api:
    platform: linux/amd64
    build:
      context: ndp-workspaces-api
      dockerfile: Dockerfile
#    ports:
#      - "8005:8000"
    restart: always
    environment:
      - CKAN_SQLALCHEMY_URL
      - server_url
      - realm
      - client_id
      - client_secret
      - authorization_url
      - token_url
      - WFR_BASE_PATH
      - web_protocol
      - base_host
      - root_url
      - backend_port
      - frontend_port
      - db_name
      - db_user
      - db_password
      - db_schema
      - postgresql_jar_path
      - backend_full_url
      - download_tmp_dir
      - WFR_DOCS_URL
      - API_PROXY_PATH
      - admin_username
      - admin_password
      - admin_realm

#    volumes:
#        - ./ndp-workspaces-api/src:/code/src

  # second instance of ckan
  ckan2:
    build:
      context: ckan-docker/ckan
      dockerfile: Dockerfile2.dev
      # dockerfile: Dockerfile
      args:
        - TZ=${TZ}
    env_file:
      - ckan-docker/.env2
    depends_on:
      db2:
        condition: service_healthy
      solr2:
        condition: service_healthy
      redis2:
        condition: service_healthy
    volumes:
      - ckan_storage2:/var/lib/ckan
      - ./src_extensions:/srv/app/src_extensions
      - ./ckan2.ini:/srv/app/ckan.ini
      - ./logs:/srv/app/logs
      - ./supervisord/ckan_harvesting.conf:/etc/supervisord.d/ckan_harvesting.conf
    restart: always
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", "http://localhost:5000"]

  datapusher2:
    extends:
      file: ckan-docker/docker-compose.dev.yml
      service: datapusher2
    restart: always

  db2:
    extends:
      file: ckan-docker/docker-compose.dev.yml
      service: db2
    restart: always

  solr2:
    extends:
      file: ckan-docker/docker-compose.dev.yml
      service: solr2
    restart: always

  redis2:
    extends:
      file: ckan-docker/docker-compose.dev.yml
      service: redis2
    restart: always

volumes:
  ckan_storage:
  ckan_storage2:
  pg_data:
  pg_data2:
  solr_data:
  solr_data2:
  miniodata:
#  jupyterhub: